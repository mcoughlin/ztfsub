#!/usr/bin/env python

import os, sys, optparse, shutil
import numpy as np
from matplotlib import pyplot as plt

from astropy import units as u
from astropy.coordinates import SkyCoord
from astropy.table import Table

import matplotlib.path as mplPath
import h5py    
from astropy.io import fits
from astropy.coordinates import Angle
import aplpy

import requests
from lxml.html import fromstring

import ztfsub.utils, ztfsub.surveys
import ztfsub.plotting

def parse_commandline():
    """
    Parse the options given on the command-line.
    """
    parser = optparse.OptionParser()

    parser.add_option("--dataDir",default="../data")
    parser.add_option("--subtractionDir",default="../subtraction")
    parser.add_option("-t","--tmpDir",default="/tmp")
    parser.add_option("-i","--inputDir",default="../input")
    parser.add_option("-o","--outputDir",default="../output")
    parser.add_option("-d","--defaultsDir",default="../defaults")
    parser.add_option("--source1",default="local")
    parser.add_option("--source2",default="legacy")
    parser.add_option("--ra",default=None)
    parser.add_option("--declination",default=None)
    parser.add_option("--imagenum1",default=None)
    parser.add_option("--imagenum2",default=None)    
    parser.add_option("--imagefile1",default=None)
    parser.add_option("--imagefile2",default=None)
    parser.add_option("--image_size",default=1000,type=int)
    parser.add_option("--doLinks",  action="store_true", default=False)
    parser.add_option("--doPlots",  action="store_true", default=False)
    parser.add_option("--doAstrometryNet",  action="store_true", default=False)
    parser.add_option("--doSubtractBackground",  action="store_true", default=False)
    parser.add_option("--doOverwrite",  action="store_true", default=False)

    opts, args = parser.parse_args()

    return opts

# Parse command line
opts = parse_commandline()
imagenum1 = opts.imagenum1
imagenum2 = opts.imagenum2
imagefile1 = opts.imagefile1
imagefile2 = opts.imagefile2
image_size = opts.image_size
inputDir = opts.inputDir
outputDir = opts.outputDir
defaultsDir = opts.defaultsDir
dataDir = opts.dataDir
ra = opts.ra
declination = opts.declination

if opts.source1 == "local":
    imagefile1Split = imagefile1.split("/")[-1]
    imagenum1 = imagefile1Split.replace(".fits","")

if ":" in ra:
    ra_hex = Angle(ra,u.hr)
    ra = float(ra_hex.degree)
if ":" in declination:
    declination_hex = Angle(declination,u.deg)
    declination = float(declination_hex.degree)

linksFile = '%s/links.txt'%outputDir
if not os.path.isdir(outputDir):
    os.makedirs(outputDir)

ztfDir = '%s/ztf'%dataDir
if not os.path.isdir(ztfDir):
    os.makedirs(ztfDir)

sdssDir = '%s/sdss'%dataDir
if not os.path.isdir(sdssDir):
    os.makedirs(sdssDir)

if opts.doLinks:
    links = ztfsub.utils.get_links()
    fid = open(linksFile,'w')
    for link in links:
        fid.write("%s\n"%link)
    fid.close()
if opts.source1 == "ztf" or opts.source2 == "ztf":
    links = [line.rstrip('\n') for line in open(linksFile)]

rm_command = "rm *.fits"
os.system(rm_command)
rm_command = "rm *.bz2"
os.system(rm_command)

tilesFile = '%s/ZTF_Fields.txt'%opts.inputDir
tiles = np.loadtxt(tilesFile,comments='%')

if opts.source2 == "ztf":
    if not opts.ra == None:
        path_out_dir='%s/%s_%s/%.5f_%.5f'%(outputDir,imagenum1,imagenum2,ra,declination)
    else:
        path_out_dir='%s/%s_%s'%(outputDir,imagenum1,imagenum2)
elif (opts.source2 == "sdss") or (opts.source2 == "ps1") or (opts.source2 == "legacy"):
    if not opts.ra == None:
        path_out_dir='%s/%s/%.5f_%.5f'%(outputDir,imagenum1,ra,declination)
    else:
        path_out_dir='%s/%s'%(outputDir,imagenum1)

if opts.doOverwrite:
    rm_command = "rm -rf %s"%path_out_dir
    os.system(rm_command)    
if not os.path.isdir(path_out_dir):
    os.makedirs(path_out_dir)

scienceimage = '%s/sci.fits'%(path_out_dir)
refimage = '%s/ref.fits'%(path_out_dir)
if not os.path.isfile(scienceimage):
    if opts.source1 == "ztf":
        scigood = ztfsub.surveys.get_ztf(opts,scienceimage,opts.imagenum1)
    elif opts.source1 == "p60":
        scigood = ztfsub.surveys.get_p60(opts,scienceimage,opts.imagenum1)
    elif opts.source1 == "local":
        scigood = ztfsub.surveys.get_local(opts,scienceimage,opts.imagefile1)
    else:
        print("ZTF and P60 implemented only...")
        exit(0)
    if not scigood:
        print("Science image does not have data...")
        exit(0)
else:
    scigood = True

hdulist=fits.open(scienceimage)
header = hdulist[0].header
if not opts.ra == None:
    ra, junk = ztfsub.utils.get_radec_from_wcs(scienceimage)
if not opts.declination == None:
    junk, declination = ztfsub.utils.get_radec_from_wcs(scienceimage)

if not os.path.isfile(refimage):
    if opts.source2 == "ztf":
        refgood = ztfsub.surveys.get_ztf(opts,refimage,opts.imagenum2)
    elif opts.source2 == "sdss":
        refgood = ztfsub.surveys.get_sdss(opts,refimage,ra,declination,'r')
    elif opts.source2 == "ps1":
        refgood = ztfsub.surveys.get_ps1(opts,refimage,ra,declination,'r')    
    elif opts.source2 == "legacy":
        refgood = ztfsub.surveys.get_legacy(opts,refimage,ra,declination,'r')
else:
    refgood = True

if not refgood:
    print("Reference image does not have data...")
    exit(0)
hdulistsci=fits.open(scienceimage)
hdulistref=fits.open(refimage)
if (np.nansum(hdulistsci[0].data) == 0.0) or (np.nansum(hdulistref[0].data) == 0.0):
    print("Either science or reference image does not have data...")
    exit(0) 

if opts.doAstrometryNet:
    ztfsub.utils.astrometrynet(scienceimage)
    ztfsub.utils.astrometrynet(refimage)

if opts.doPlots:
    plotName = os.path.join(path_out_dir,'sci.pdf')
    ztfsub.plotting.plot_image(scienceimage,plotName)
    plotName = os.path.join(path_out_dir,'ref.pdf')
    ztfsub.plotting.plot_image(refimage,plotName)    

ztfsub.utils.sextractor(scienceimage,defaultsDir,doSubtractBackground=opts.doSubtractBackground)
ztfsub.utils.sextractor(refimage,defaultsDir,doSubtractBackground=opts.doSubtractBackground)

ztfsub.utils.p60sdsssub(opts, scienceimage, refimage, [ra,declination], 
               distortdeg=1, scthresh1=3.0,
               scthresh2=10.0, tu=5000, iu=5000, ig=2.3, tg=1.0,
               stamps=None, nsx=4, nsy=4, ko=0, bgo=0, radius=10,
               tlow=-5000.0, ilow=-5000.0, sthresh=5.0, ng=None, aperture=10.0,
               defaultsDir=defaultsDir)

scienceimageshift = scienceimage.replace(".fits",".shift.fits")
ztfsub.utils.sextractor(scienceimageshift,defaultsDir,doSubtractBackground=opts.doSubtractBackground)

hdulistscishift=fits.open(scienceimageshift)
if np.nansum(hdulistscishift[0].data) == 0.0:
    print("Shifted science does not have data...")
    exit(0)

imagesub = scienceimage.replace(".fits",".sub.fits")
imagesubcat = imagesub.replace(".fits",".cat")
ztfsub.utils.sextractor(imagesub,defaultsDir,doSubtractBackground=opts.doSubtractBackground)

if opts.doPlots:

    #cat1 = np.loadtxt(catfile1)
    #cat2 = np.loadtxt(catfile2)
    #catsub = np.loadtxt(catfilesub)
    
    #thresh = -5
    #if cat1.shape:
    #    cat1 = cat1[cat1[:,2]<thresh,:]
    #if cat2.shape:
    #    cat2 = cat2[cat2[:,2]<thresh,:]
    #if catsub.shape:
    #    catsub = catsub[catsub[:,2]<thresh,:]
    
    plotName = os.path.join(path_out_dir,'scishift.pdf')
    ztfsub.plotting.plot_image(scienceimageshift,plotName)
    
    fig = plt.figure(figsize=(12,4))
    f1 = aplpy.FITSFigure(scienceimageshift,figure=fig,subplot=[0.1,0.1,0.25,0.8])
    f1.set_tick_labels_font(size='x-small')
    f1.set_axis_labels_font(size='small')
    f1.show_grayscale()
    #f1.show_circles(cat1[:,3],cat1[:,4],1,zorder=0) 
    f2 = aplpy.FITSFigure(refimage, figure=fig, subplot=[0.4,0.1,0.25,0.8])
    f2.set_tick_labels_font(size='x-small')
    f2.set_axis_labels_font(size='small')
    f2.show_grayscale()
    f2.hide_yaxis_label()
    f2.hide_ytick_labels()
    #f2.show_circles(cat2[:,3],cat2[:,4],cat2[:,6])
    f3 = aplpy.FITSFigure(imagesub, figure=fig, subplot=[0.7,0.1,0.25,0.8])
    f3.set_tick_labels_font(size='x-small')
    f3.set_axis_labels_font(size='small')
    f3.show_grayscale()
    f3.hide_yaxis_label()
    f3.hide_ytick_labels()
    #f3.show_circles(catsub[:,3],catsub[:,4],catsub[:,6])
    fig.canvas.draw()
    plotName = os.path.join(path_out_dir,'panels.pdf')
    plt.savefig(plotName)
    plotName = os.path.join(path_out_dir,'panels.png')
    plt.savefig(plotName)
    plt.close()    
