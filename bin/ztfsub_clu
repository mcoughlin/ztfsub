
import os, sys, optparse, glob
import numpy as np

import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as plt 

from astropy import units as u
from astropy.coordinates import SkyCoord
from astropy.table import Table

import matplotlib.path as mplPath
import h5py    
from astropy.io import fits

import aplpy

import ztfsub.utils, ztfsub.surveys
import ztfsub.plotting

def parse_commandline():
    """
    Parse the options given on the command-line.
    """
    parser = optparse.OptionParser()

    parser.add_option("--dataDir",default="../data")
    parser.add_option("-t","--tmpDir",default="/tmp")
    parser.add_option("-o","--outputDir",default="../output_clu")
    parser.add_option("-d","--defaultsDir",default="../defaults")
    parser.add_option("--ra",default=None,type=float)
    parser.add_option("--declination",default=None,type=float)
    parser.add_option("--fwhm",default=None)
    parser.add_option("--field",default="p3967")
    parser.add_option("--image_size",default=1000,type=int)
    parser.add_option("--doPlots",  action="store_true", default=False)
    parser.add_option("--doForcedPhotometry",  action="store_true", default=False)
    opts, args = parser.parse_args()

    return opts

# Parse command line
opts = parse_commandline()
field = opts.field
dataDir = opts.dataDir
outputDir = opts.outputDir
defaultsDir = opts.defaultsDir

if not opts.ra == None:
    path_out_dir='%s/%s/%.5f_%.5f'%(outputDir,opts.field,opts.ra,opts.declination)
else:
    path_out_dir='%s/%s'%(outputDir,opts.field)
if not os.path.isdir(path_out_dir):
    os.makedirs(path_out_dir)

path_out_pairs='%s/pairs'%path_out_dir
path_out_refs='%s/refs'%path_out_dir
if not os.path.isdir(path_out_refs):
    os.makedirs(path_out_refs)
if not os.path.isdir(path_out_pairs):
    os.makedirs(path_out_pairs)

if opts.doForcedPhotometry:
    fwhms = {}
    if not opts.fwhm == None:
        fwhm_vals = [float(x) for x in opts.fwhm.split(",")]
        fwhms["Ha656"] = fwhm_vals[0]
        fwhms["Ha663"] = fwhm_vals[1]
        fwhms["Ha672"] = fwhm_vals[2]
        fwhms["Ha681"] = fwhm_vals[3]
    else:
        fwhm_default = 5.0
        fwhms["Ha656"] = fwhm_default
        fwhms["Ha663"] = fwhm_default
        fwhms["Ha672"] = fwhm_default
        fwhms["Ha681"] = fwhm_default

imagefiles = ztfsub.surveys.get_ptf(opts,path_out_refs)

filts = imagefiles.keys()

for ii in xrange(len(filts)):
    filt = filts[ii]
    fwhm = fwhms[filt]

    hdulist=fits.open(imagefiles[filt])
    header = hdulist[0].header
    if not opts.ra == None:
        ra = opts.ra
    else:
        ra = float(header["CRVAL1"])
    if not opts.declination == None:
        dec = opts.declination
    else:
        dec = float(header["CRVAL2"])

    ztfsub.utils.sextractor(imagefiles[filt],defaultsDir)

    if opts.doForcedPhotometry:
        ztfsub.utils.forcedphotometry(imagefiles[filt],ra,dec,fwhm=fwhm)

    if opts.doPlots:
        plotName = imagefiles[filt].replace(".fits",".pdf")
        if opts.doForcedPhotometry:
            ztfsub.plotting.plot_image(imagefiles[filt],plotName,ra=ra,dec=dec,fwhm=fwhm)
        else:
            ztfsub.plotting.plot_image(imagefiles[filt],plotName)

for ii in xrange(len(filts)):
    for jj in xrange(len(filts)):
        filt1, filt2 = filts[ii], filts[jj]

        if not ((filt1 == "Ha681" and filt2 == "Ha672") or (filt1 == "Ha672" and filt2 == "Ha681") or (filt1 == "Ha663" and filt2 == "Ha656") or (filt1 == "Ha656" and filt2 == "Ha663")): continue

        path_out_pair='%s/%s_%s'%(path_out_pairs,filt1,filt2)
        if not os.path.isdir(path_out_pair):
            os.makedirs(path_out_pair)

        scienceimage = '%s/sci.fits'%(path_out_pair)
        refimage = '%s/ref.fits'%(path_out_pair)
        cp_command = "cp %s %s"%(imagefiles[filt1],scienceimage)
        os.system(cp_command)
        cp_command = "cp %s %s"%(imagefiles[filt2],refimage)
        os.system(cp_command)

        hdulist=fits.open(scienceimage)
        header = hdulist[0].header
        if not opts.ra == None:
            ra = opts.ra
        else:
            ra = float(header["CRVAL1"])
        if not opts.declination == None:
            dec = opts.declination
        else:
            dec = float(header["CRVAL2"])

        if opts.doPlots:
            plotName = os.path.join(path_out_pair,'sci.pdf')
            if opts.doForcedPhotometry:
                ztfsub.plotting.plot_image(scienceimage,plotName,ra=ra,dec=dec,fwhm=fwhm)
            else:
                ztfsub.plotting.plot_image(scienceimage,plotName)
            plotName = os.path.join(path_out_pair,'ref.pdf')
            if opts.doForcedPhotometry:
                ztfsub.plotting.plot_image(refimage,plotName,ra=ra,dec=dec,fwhm=fwhm)
            else:
                ztfsub.plotting.plot_image(refimage,plotName)        

        ztfsub.utils.sextractor(scienceimage,defaultsDir)
        ztfsub.utils.sextractor(refimage,defaultsDir)

        ztfsub.utils.p60sdsssub(scienceimage, refimage, [ra,dec], 
               distortdeg=1, scthresh1=3.0,
               scthresh2=10.0, tu=50000, iu=50000, ig=2.3, tg=1.0,
               stamps=None, nsx=4, nsy=4, ko=0, bgo=0, radius=10,
               tlow=0.0, ilow=0.0, sthresh=5.0, ng=None, aperture=10.0,
               defaultsDir=defaultsDir)

        scienceimageshift = scienceimage.replace(".fits",".shift.fits")
        ztfsub.utils.sextractor(scienceimageshift,defaultsDir)

        imagesub = scienceimage.replace(".fits",".sub.fits")
        imagesubcat = imagesub.replace(".fits",".cat")
        ztfsub.utils.sextractor(imagesub,defaultsDir)

        if opts.doForcedPhotometry:
            fwhm = np.max([fwhms[filt1],fwhms[filt2]])
            ztfsub.utils.forcedphotometry(scienceimage,ra,dec,fwhm=fwhm)
            ztfsub.utils.forcedphotometry(refimage,ra,dec,fwhm=fwhm)
            ztfsub.utils.forcedphotometry(scienceimageshift,ra,dec,fwhm=fwhm)
            ztfsub.utils.forcedphotometry(imagesub,ra,dec,fwhm=fwhm)

        if opts.doPlots:
            #cat1 = np.loadtxt(catfile1)
            #cat2 = np.loadtxt(catfile2)
            #catsub = np.loadtxt(catfilesub)
     
            #thresh = -8
            #cat1 = cat1[cat1[:,2]<thresh,:]
            #cat2 = cat2[cat2[:,2]<thresh,:]
            #catsub = catsub[catsub[:,2]<thresh,:]
    
            plotName = os.path.join(path_out_pair,'scishift.pdf')
            if opts.doForcedPhotometry:
                ztfsub.plotting.plot_image(scienceimageshift,plotName,ra=ra,dec=dec,fwhm=fwhm)
            else:
                ztfsub.plotting.plot_image(scienceimageshift,plotName)

            fig = plt.figure(figsize=(12,4))
            f1 = aplpy.FITSFigure(scienceimageshift,figure=fig,subplot=[0.1,0.1,0.25,0.8])
            f1.set_tick_labels_font(size='x-small')
            f1.set_axis_labels_font(size='small')
            f1.show_grayscale()
            if opts.doForcedPhotometry:
                f1.show_circles(ra,dec,fwhm/3600.0,zorder=99,linestyle='dashed', edgecolor='white')
            #f1.show_circles(cat1[:,3],cat1[:,4],1,zorder=0)
            f2 = aplpy.FITSFigure(refimage, figure=fig, subplot=[0.4,0.1,0.25,0.8])
            f2.set_tick_labels_font(size='x-small')
            f2.set_axis_labels_font(size='small')
            f2.show_grayscale()
            f2.hide_yaxis_label()
            f2.hide_ytick_labels()
            if opts.doForcedPhotometry:
                f2.show_circles(ra,dec,fwhm/3600.0,zorder=99,linestyle='dashed', edgecolor='white')
            #f2.show_circles(cat2[:,3],cat2[:,4],cat2[:,6])
            f3 = aplpy.FITSFigure(imagesub, figure=fig, subplot=[0.7,0.1,0.25,0.8])
            f3.set_tick_labels_font(size='x-small')
            f3.set_axis_labels_font(size='small')
            f3.show_grayscale()
            f3.hide_yaxis_label()
            f3.hide_ytick_labels()
            if opts.doForcedPhotometry:
                f3.show_circles(ra,dec,fwhm/3600.0,zorder=99,linestyle='dashed', edgecolor='white')
            #f3.show_circles(catsub[:,3],catsub[:,4],catsub[:,6])
            fig.canvas.draw()
            plotName = os.path.join(path_out_pair,'panels.pdf')
            plt.savefig(plotName)
            plotName = os.path.join(path_out_pair,'panels.png')
            plt.savefig(plotName)
            plt.close() 
