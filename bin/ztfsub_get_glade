
import os, sys, optparse
import numpy as np

import astropy.units as u
import astropy.coordinates as coord

from astroquery.vizier import Vizier
#Vizier.ROW_LIMIT = -1

#catalog_list = Vizier.find_catalogs('GLADE')
#cat, = Vizier.get_catalogs('VII/275')

def parse_commandline():
    """
    Parse the options given on the command-line.
    """
    parser = optparse.OptionParser()

    parser.add_option("-i","--inputDir",default="../input")
    parser.add_option("-o","--outputDir",default="../output")

    parser.add_option("--doGetTiles",  action="store_true", default=False)

    opts, args = parser.parse_args()

    return opts

# Parse command line
opts = parse_commandline()

inputDir = opts.inputDir
outputDir = opts.outputDir

linksFile = '%s/links.txt'%outputDir
links = [line.rstrip('\n') for line in open(linksFile)]

fieldIDs = []
for link in links:
    imagefile = link.split("/")[-1]
    linkSplit = link.split("/")
    imagenum = int(linkSplit[-2])
    imageSplit = imagefile.replace(".fits","").split("_")
    fieldID = int(imageSplit[-6])

    if fieldID > 10000: continue

    baselink = "/".join(link.split("/")[:-1]) + "/"
    fieldIDs.append(fieldID)

fieldIDs = list(set(fieldIDs))

tilesFile = '%s/ZTF_Fields.txt'%inputDir
tiles = np.loadtxt(tilesFile,comments='%')

ztffieldsfile = "%s/ZTF_Fields_galaxies.txt"%opts.outputDir
if opts.doGetTiles:
    fid = open(ztffieldsfile,'w')
    tiledata = {}
    for tile in tiles:
        fieldID, ra, dec = tile[0], tile[1], tile[2]
        if not fieldID in fieldIDs: continue

        print fieldID
        result = Vizier.query_region(coord.SkyCoord(ra=ra, dec=dec,
                                     unit=(u.deg, u.deg),
                                     frame='icrs'),
                                     width=[2.0*u.deg,2.0*u.deg],
                                     catalog=['VII/275'])
        for table_name in result.keys():
            table = result[table_name]
            appMs = table["Bmag"] # - (5*np.log10(table["Dist"]*1e6) - 5)

            thresh = 15.5
            idxs = np.where(appMs < thresh)[0]

            fid.write("%d %d\n"%(fieldID,len(idxs)))
    fid.close()

ztffields = np.loadtxt(ztffieldsfile)
idx = np.argmax(ztffields[:,1])
fieldID = ztffields[idx,0]
numgalaxies = ztffields[idx,1]

idx = np.where(fieldID == tiles[:,0])[0]

print "Tile ID: %d"%fieldID
print "RA: %.5f"%(tiles[idx,1])
print "Declination: %.5f"%(tiles[idx,2])
print "Number of galaxies: %d"%(numgalaxies)


