
import os, sys, optparse, shutil
import numpy as np
from matplotlib import pyplot as plt

from astropy import units as u
from astropy.coordinates import SkyCoord
from astropy.table import Table

import matplotlib.path as mplPath
import h5py    
from astropy.io import fits
import aplpy

import requests
from lxml.html import fromstring

import ztfsub.utils

def parse_commandline():
    """
    Parse the options given on the command-line.
    """
    parser = optparse.OptionParser()

    parser.add_option("--dataDir",default="../data")
    parser.add_option("-i","--inputDir",default="../input")
    parser.add_option("-o","--outputDir",default="../output")
    parser.add_option("-d","--defaultsDir",default="../defaults")
    parser.add_option("--ra",default=None,type=float)
    parser.add_option("--declination",default=None,type=float)
    parser.add_option("--image",default="ztf_20171101362384_000608_zr_c01_o_q1_sciimg.fits")
    parser.add_option("--imagenum",default=None,type=int)
    parser.add_option("--image_size",default=1000,type=int)
    parser.add_option("--doLinks",  action="store_true", default=False)
    parser.add_option("--doPlots",  action="store_true", default=False)
    parser.add_option("--doAstrometryNet",  action="store_true", default=False)

    opts, args = parser.parse_args()

    return opts

def get_fits(ra,dec):
    hdf5file = "%s/SDSS_DR9_Fields_All_PolySort.hdf5"%inputDir
    f = h5py.File(hdf5file, 'r')
    a_group_key = list(f.keys())[0]
    data = list(f[a_group_key])
    Run, Rerun, Camcol, Field, MJD_u, MJD_g, MJD_r, MJD_i, MJD_z, RA1, RA2, RA3, RA4, Dec1, Dec2, Dec3, Dec4, IndexPoly = data
    RAAve = (RA1+RA2+RA3+RA4)/4.0
    DecAve = (Dec1+Dec2+Dec3+Dec4)/4.0
    
    catcoord = SkyCoord(RA1*u.rad,Dec1*u.rad,frame='icrs')
    
    #%%%%%%%%%%%%check if the sdss ref already exists in ../SN/refs/, each band
    #sdss_bands=['u','g','r','i','z']
    #sdss_bands=['g','r']
    sdss_bands=['r']
    ra_box = np.arange(-0.2,0.3,0.1)
    dec_box = np.arange(-0.2,0.3,0.1)   
 
    BaseURL = 'http://data.sdss3.org/sas/dr9/boss/photoObj/frames/'

    Threshold  = 0.3
    for ss in xrange(len(sdss_bands)):
        fitsfile = '%s/sdss_%s_refimg.fits'%(path_out_refs,sdss_bands[ss])
        if os.path.isfile(fitsfile): continue

        listfile = 'sdss_%s_list.txt'%sdss_bands[ss]
        fid = open(listfile,'w')
        for ii in xrange(len(ra_box)):
            for jj in xrange(len(dec_box)):
                thisra = np.deg2rad(ra + ra_box[ii])
                thisdec = np.deg2rad(dec + dec_box[jj])
  
                coord = SkyCoord(thisra*u.rad,thisdec*u.rad,frame='icrs') 
                coord_distance = catcoord.separation(coord)
 
                Iids = np.where(coord_distance.deg <= Threshold)[0]
                for Iid in Iids:
                    bbPath = mplPath.Path(np.array([[RA1[Iid],Dec1[Iid]],[RA2[Iid],Dec2[Iid]],[RA3[Iid],Dec3[Iid]],[RA4[Iid],Dec4[Iid]]]))
                    check1 = bbPath.contains_point((thisra, thisdec))
                    check2 = bbPath.contains_point((thisra-2*np.pi, thisdec))
                    check3 = bbPath.contains_point((thisra+2*np.pi, thisdec))
    
                    check = check1 or check2 or check3
                    if not check: continue
    
                    URL = '%s/%d/%d/%d/'%(BaseURL,Rerun[Iid],Run[Iid],Camcol[Iid])
                    FileName = 'frame-%s-%06d-%d-%04d.fits.bz2'%(sdss_bands[ss],Run[Iid],Camcol[Iid],Field[Iid])
                    FileNameFits = 'frame-%s-%06d-%d-%04d.fits'%(sdss_bands[ss],Run[Iid],Camcol[Iid],Field[Iid])
                    FileNameFitsPath = '%s/frame-%s-%06d-%d-%04d.fits'%(sdssDir,sdss_bands[ss],Run[Iid],Camcol[Iid],Field[Iid])
                    Link = '%s%s'%(URL,FileName)
    
                    fid.write('%s\n'%(FileNameFitsPath))
                    if os.path.isfile(FileNameFitsPath): continue
    
                    wget_command = "wget %s"%Link
                    os.system(wget_command)
                    bunzip2_command = "bunzip2 %s"%FileName
                    os.system(bunzip2_command)
   
                    mv_command = 'mv %s %s'%(FileNameFits,sdssDir)
                    os.system(mv_command)

        fid.close()

        lines = [line.rstrip('\n') for line in open(listfile)]
        if len(lines) == 0:
            print "No SDSS images available... returning."
            continue 

        swarp_command = 'swarp @%s -c %s/swarp.conf -CENTER %.5f,%.5f -IMAGE_SIZE %d,%d  -PIXEL_SCALE 0.396127'%(listfile,defaultsDir,ra-0.15,dec,image_size,image_size)
        os.system(swarp_command)

        rm_command = "rm %s swarp.xml coadd.weight.fits"%listfile
        os.system(rm_command)
    
        mv_command = 'mv coadd.fits %s/sdss_%s_refimg.fits'%(path_out_refs,sdss_bands[ss])
        os.system(mv_command)

        # replace borders with NaNs in ref image if there are any that are == 0,
        hdulist=fits.open('%s/sdss_%s_refimg.fits'%(path_out_refs,sdss_bands[ss]))
        hdulist[0].data[hdulist[0].data==0]=np.nan 
        # scale values
        #hdulist[0].data = hdulist[0].data*100.0/np.nanstd(hdulist[0].data)
        hdulist[0].data = hdulist[0].data + 1000
        #hdulist[0].data = hdulist[0].data*100.0/np.nanstd(hdulist[0].data)
        hdulist.writeto('%s/sdss_%s_refimg_t.fits'%(path_out_refs,sdss_bands[ss]))

        mv_command = 'mv %s/sdss_%s_refimg_t.fits %s/sdss_%s_refimg.fits'%(path_out_refs,sdss_bands[ss],path_out_refs,sdss_bands[ss])
        os.system(mv_command)

        catfile = '%s/sdss_%s_refimg.cat'%(path_out_refs,sdss_bands[ss])
        cmd_sex = 'sex %s/sdss_%s_refimg.fits -c %s/default.sex -PARAMETERS_NAME %s/daofind.param -FILTER_NAME %s/default.conv'%(path_out_refs,sdss_bands[ss],defaultsDir,defaultsDir,defaultsDir)
        os.system(cmd_sex)
        mv_command = 'mv test.cat %s'%(catfile)
        os.system(mv_command)

    rm_command = "rm *.fits"
    os.system(rm_command)
    rm_command = "rm *.bz2"
    os.system(rm_command)

# Parse command line
opts = parse_commandline()
image = opts.image
image_size = opts.image_size
inputDir = opts.inputDir
outputDir = opts.outputDir
defaultsDir = opts.defaultsDir
dataDir = opts.dataDir

linksFile = '%s/links.txt'%outputDir
if not os.path.isdir(outputDir):
    os.makedirs(outputDir)

sdssDir = '%s/sdss'%dataDir
if not os.path.isdir(sdssDir):
    os.makedirs(sdssDir)
ztfDir = '%s/ztf'%dataDir
if not os.path.isdir(ztfDir):
    os.makedirs(ztfDir)

if opts.doLinks:
    links = get_links()
    fid = open(linksFile,'w')
    for link in links:
        fid.write("%s\n"%link)
    fid.close()
links = [line.rstrip('\n') for line in open(linksFile)]

images = []
for link in links:
    if not opts.imagenum == None:
        linkSplit = link.split("/")
        if opts.imagenum == int(linkSplit[-2]):
            images.append(link)
    else:
        if image in link:
            image = link
            break

rm_command = "rm *.fits"
os.system(rm_command)
rm_command = "rm *.bz2"
os.system(rm_command)

if not opts.imagenum == None:
    tilesFile = '%s/ZTF_Fields.txt'%opts.inputDir
    tiles = np.loadtxt(tilesFile,comments='%')

    imageSplit = images[0].replace(".fits","").split("_")
    fieldID = int(imageSplit[-6])
    idx = np.where(fieldID == tiles[:,0])[0]
    tile = tiles[idx][0]
    fieldID, tilera, tiledec = tile[0], tile[1], tile[2]

    path_out_dir='%s/%d'%(outputDir,opts.imagenum)
    if not opts.ra == None:
        path_out_dir='%s/%.5f_%.5f'%(path_out_dir,opts.ra,opts.declination)
    path_out_refs='%s/refs'%(path_out_dir)
    if not os.path.isdir(path_out_refs):
        os.makedirs(path_out_refs)
    imagefile = '%s/science.fits'%(path_out_dir)
    #if True:
    if not os.path.isfile(imagefile):

        listfile = "ztf_list.txt"
        fid = open(listfile,'w')
        raimages, decimages = [], []
        for image in images:
            imagefinal = '%s/%s'%(ztfDir,image.split("/")[-1])
            fid.write('%s\n'%(imagefinal))

            if not os.path.isfile(imagefinal):
                wget_command = "wget %s --user %s --password %s"%(image,os.environ["ZTF_USERNAME"],os.environ["ZTF_PASSWORD"])
                os.system(wget_command)
                mv_command = 'mv %s %s'%(image.split("/")[-1],ztfDir)
                os.system(mv_command)

            hdulist=fits.open(imagefinal)
            header = hdulist[0].header
            raimage, decimage = float(header["CRVAL1"]), float(header["CRVAL2"])
            raimages.append(raimage)
            decimages.append(decimage)
        fid.close()

        if not opts.ra == None:
            ra = opts.ra
        else:
            ra = np.mean(raimages)

        if not opts.declination == None:
            dec = opts.declination
        else:
            dec = np.mean(decimages)

        swarp_command = 'swarp @%s -c %s/swarp.conf -CENTER %.5f,%.5f -IMAGE_SIZE %d,%d -PIXEL_SCALE 1.0'%(listfile,defaultsDir,ra-0.15,dec,image_size,image_size)
        os.system(swarp_command)

        rm_command = "rm %s swarp.xml coadd.weight.fits"%listfile
        os.system(rm_command)

        mv_command = 'mv coadd.fits %s'%(imagefile)
        os.system(mv_command)

        # replace borders with NaNs in ref image if there are any that are == 0,
        hdulist=fits.open(imagefile)
        hdulist[0].data[hdulist[0].data==0]=np.nan
        hdulist.writeto(imagefile,clobber=True)
        if np.nansum(hdulist[0].data) == 0:
            print "No data in science image... exiting."
            exit(0)
else:
    imagefile = image.split("/")[-1]
    path_out_dir='%s/%s'%(outputDir,imagefile.replace(".fits",""))
    path_out_refs='%s/refs'%(path_out_dir)
    if not os.path.isdir(path_out_refs):
        os.makedirs(path_out_refs)
    imagefile = '%s/science.fits'%(path_out_dir)
    if not os.path.isfile(imagefile):

        imagefinalfile = "%s/%s"%(ztfDir,image.split("/")[-1])
        if not os.path.isfile(imagefinalfile):
            wget_command = "wget %s --user %s --password %s"%(image,os.environ["ZTF_USERNAME"],os.environ["ZTF_PASSWORD"])
            os.system(wget_command)
            mv_command = 'mv %s %s'%(image.split("/")[-1],ztfDir)
            os.system(mv_command)

        cp_command = "cp %s %s"%(imagefinalfile,imagefile)
        os.system(cp_command)

if opts.doAstrometryNet:
    ztfsub.utils.astrometrynet(imagefile)

hdulist=fits.open(imagefile)
header = hdulist[0].header

if not opts.ra == None:
    ra = opts.ra
else:
    ra = float(header["CRVAL1"])

if not opts.declination == None:
    dec = opts.declination
else:
    dec = float(header["CRVAL2"])

coord = SkyCoord(ra*u.deg,dec*u.deg,frame='icrs')

if opts.doPlots:
    hdulist=fits.open(imagefile)
    sciimage=hdulist[0].data
    vmin = np.nanmin(sciimage)
    vmax = np.nanmax(sciimage)
    ymax,xmax = sciimage.shape
    plt.figure()
    plt.imshow(sciimage,vmin=vmin,vmax=vmax,cmap='Greys_r', origin='lower')
    plt.xlim([0,xmax])
    plt.ylim([0,ymax])
    plotName = os.path.join(path_out_dir,'science.pdf')
    plt.savefig(plotName)
    plt.close()

get_fits(ra,dec)
refimage = '%s/sdss_%s_refimg.fits'%(path_out_refs,'r') 
if not os.path.isfile(refimage):
    print "No reference image... stopping."
    exit(0)

ztfsub.utils.p60sdsssub(imagefile, refimage, [ra,dec], 
               distortdeg=1, scthresh1=3.0,
               scthresh2=10.0, tu=50000, iu=50000, ig=2.3, tg=1.0,
               stamps=None, nsx=4, nsy=4, ko=0, bgo=0, radius=10,
               tlow=0.0, ilow=0.0, sthresh=5.0, ng=None, aperture=10.0,
               defaultsDir=defaultsDir)

imagefileshift = imagefile.replace(".fits",".shift.fits")
catfileshift = imagefileshift.replace(".fits",".cat")
cmd_sex = 'sex %s -c %s/default.sex -PARAMETERS_NAME %s/daofind.param -FILTER_NAME %s/default.conv'%(imagefileshift,defaultsDir,defaultsDir,defaultsDir)
os.system(cmd_sex)
mv_command = 'mv test.cat %s'%(catfileshift)
os.system(mv_command)

catfile1 = catfileshift
catfile2 = refimage.replace(".fits",".cat")
fitsfilesub = imagefile.replace(".fits",".sub.fits")
catfilesub = imagefile.replace(".fits",".sub.cat")

cmd_sex = 'sex %s -c %s/default.sex -PARAMETERS_NAME %s/daofind.param -FILTER_NAME %s/default.conv'%(fitsfilesub,defaultsDir,defaultsDir,defaultsDir)
os.system(cmd_sex)
mv_command = 'mv test.cat %s'%(catfilesub)
os.system(mv_command)

if opts.doPlots:

    cat1 = np.loadtxt(catfile1)
    cat2 = np.loadtxt(catfile2)
    catsub = np.loadtxt(catfilesub)
    
    thresh = -5
    if cat1.shape:
        cat1 = cat1[cat1[:,2]<thresh,:]
    if cat2.shape:
        cat2 = cat2[cat2[:,2]<thresh,:]
    if catsub.shape:
        catsub = catsub[catsub[:,2]<thresh,:]
    
    hdulist=fits.open(imagefileshift)
    image1=hdulist[0].data
    hdulist=fits.open(refimage)
    image2=hdulist[0].data
    hdulist=fits.open(fitsfilesub)
    imagesub=hdulist[0].data
    
    angles = np.linspace(0,2*np.pi,100)
    
    vmin = np.nanmin(image1)
    vmax = np.nanmax(image1)
    vmin = 95.0
    vmax = 105.0
    ymax,xmax = image1.shape
    plt.figure()
    plt.imshow(image1,vmin=vmin,vmax=vmax,cmap='Greys_r', origin='lower')
    for x, y, fwhm in zip(cat1[:,0],cat1[:,1],cat1[:,5]):
        plt.plot(x+np.cos(angles)*fwhm,y+np.sin(angles)*fwhm,'r-')
    plt.xlim([0,xmax])
    plt.ylim([0,ymax])
    plotName = os.path.join(path_out_dir,'image1.pdf')
    plt.savefig(plotName)
    plt.close()
    
    vmin = 999.9
    vmax = 1000.1
    plt.figure()
    plt.imshow(image2,vmin=vmin,vmax=vmax,cmap='Greys_r', origin='lower')
    for x, y, fwhm in zip(cat2[:,0],cat2[:,1],cat2[:,5]):
        plt.plot(x+np.cos(angles)*fwhm,y+np.sin(angles)*fwhm,'r-')
    plt.xlim([0,xmax])
    plt.ylim([0,ymax])
    plotName = os.path.join(path_out_dir,'image2.pdf')
    plt.savefig(plotName)
    plt.close()
    
    vmin = -0.1
    vmax = 0.1
    plt.figure()
    plt.imshow(imagesub,vmin=vmin,vmax=vmax,cmap='Greys_r', origin='lower')
    for x, y, fwhm in zip(catsub[:,0],catsub[:,1],catsub[:,5]):
        plt.plot(x+np.cos(angles)*fwhm,y+np.sin(angles)*fwhm,'r-')
    plt.xlim([0,xmax])
    plt.ylim([0,ymax])
    plotName = os.path.join(path_out_dir,'imagesub.pdf')
    plt.savefig(plotName)
    plt.close()

    fig = plt.figure(figsize=(12,4))
    f1 = aplpy.FITSFigure(imagefileshift,figure=fig,subplot=[0.1,0.1,0.25,0.8])
    f1.set_tick_labels_font(size='x-small')
    f1.set_axis_labels_font(size='small')
    f1.show_grayscale()
    f1.show_circles(cat1[:,3],cat1[:,4],1,zorder=0) 
    f2 = aplpy.FITSFigure(refimage, figure=fig, subplot=[0.4,0.1,0.25,0.8])
    f2.set_tick_labels_font(size='x-small')
    f2.set_axis_labels_font(size='small')
    f2.show_grayscale()
    f2.hide_yaxis_label()
    f2.hide_ytick_labels()
    f2.show_circles(cat2[:,3],cat2[:,4],cat2[:,6])
    f3 = aplpy.FITSFigure(fitsfilesub, figure=fig, subplot=[0.7,0.1,0.25,0.8])
    f3.set_tick_labels_font(size='x-small')
    f3.set_axis_labels_font(size='small')
    f3.show_grayscale()
    f3.hide_yaxis_label()
    f3.hide_ytick_labels()
    f3.show_circles(catsub[:,3],catsub[:,4],catsub[:,6])
    fig.canvas.draw()
    plotName = os.path.join(path_out_dir,'panels.pdf')
    plt.savefig(plotName)
    plt.close()    
